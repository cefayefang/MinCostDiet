#+OPTIONS: toc:nil todo:nil ^:nil
#+PROPERTY: header-args:python :results output raw  :noweb no-export :exports code

* Introduction
  We're thinking about the problem of finding the cheapest possible
  nutritious diet.  Last time we argued that this problem could be
  expressed as a /linear program/
\[
    \min_x p'x
\]

such that
$$\begin{bmatrix}
      A\\
      -A
   \end{bmatrix}x \geq \begin{bmatrix}
                        b_{min}\\
                        -b_{max}
                      \end{bmatrix},$$

  where $p$ is a vector of prices, $A$ is a matrix that maps
  vectors of quantities of food into vectors of nutrients, and where
  $b_{min}$ and $b_{max}$ are respectively dietary minimums
  and maximums of different nutrients.  As above, we will sometimes stack these
  objects, obtaining
  \[
      \tilde{A} = \begin{bmatrix}
                        A_{min}\\
                        -A_{max}
                      \end{bmatrix}
  \]
  and
  \[
      \tilde{b} = \begin{bmatrix}
                        b_{min}\\
                        -b_{max}
                      \end{bmatrix}
  \]

  Our job in this notebook: Specify the objects required by the linear
  program $(p,\tilde{A},\tilde{b})$, then have the computer solve the problem for us.

* USDA Food Central DataBase

  The USDA maintains a database of nutritional information, where
  different kinds of food are identified by an FDC number.  They do
  not provide any data on prices.  

  To look up nutritional information, use api provided by the USDA at
  https://fdc.nal.usda.gov/.   You should sign up for a
  free api key (see directions on page), then add that key here in
  place of "DEMO_KEY".

#+begin_src jupyter-python :session :tangle diet_problem.py :results silent
apikey = "DEMO_KEY"  # Replace with a real key!  "DEMO_KEY" will be slow...
#+end_src

** Looking up foods

I've written a little module =fooddatacentral=.  Install it (only once!), along with other requirements.
#+begin_src jupyter-python :session :results silent
%pip install -r requirements.txt --upgrade
#+end_src
This module offers some simple methods
   - =search=
   - =nutrients=
   - =units=

** FDC Search
Here's a little code to help look up FDC codes for foods of
different descriptions.

#+begin_src jupyter-python :results output :session
import fooddatacentral as fdc

fdc.search(apikey,"marmite")
#+end_src


** FDC Nutrients

Once we know the =fdc_id= of a particular food we can look up a
variety of information on it.  We start with nutrients
#+begin_src jupyter-python :results output :session
id =     # Put an FDC ID HERE!
fdc.nutrients(apikey,fdc_id=id)
#+end_src

** FDC Ingredients

We can also look up the ingredients for many foods in the FDC:
#+begin_src jupyter-python

fdc.ingredients(apikey,id)
#+end_src


* Prices

Now, let's begin thinking about constructing the objects we need for
the linear program.  Start with specifying $p$, the vector of prices.  

Also note that some kinds of foods need to have unit weights (in
grams) supplied under "Units"; e.g., extra large eggs are taken to
each weigh 56g.  These conversions can also often be found on the USDA
FDC website.  

Food is purchased in particular units (gallons, pounds, grams).  And
in some cases the natural units are things like donuts or eggs, in
which case we may need to define our  own units (see the example of
"xl_egg" below).  New units can be added to a file =.unitsrc= in your home directory.

** Example: Stigler's Foods

In his 1945 paper George Stigler constructed a subsistence diet
chosen from 14 different goods (see Table B in [[https://www.jstor.org/stable/pdf/1231810.pdf][Stigler 1945]]), with
prices reported for the years 1939 & 1944.

I've looked up more recent prices for these same goods, and recorded
these at
https://docs.google.com/spreadsheets/d/1ObK5N_5aVXzVHE7ZXWBg0kQvPS3k1enRwsUjhytwh5A/, in a sheet called "Stigler Table B (2022 Prices)"

The code below allows us to collect data on different kinds of food
with their prices from google spreadsheets.

In this case, we use a function from a module I've written,
 =eep153_tools.sheets=, to read the price data for the
Stigler goods.

#+begin_src jupyter-python :session :tangle diet_problem.py
import pandas as pd
from eep153_tools.sheets import read_sheets

df = read_sheets("1ObK5N_5aVXzVHE7ZXWBg0kQvPS3k1enRwsUjhytwh5A",sheet='Stigler Table B (2022 Prices)')

df = df.set_index('Food')

df
#+end_src


** Example: My Shopping Trip
Here's an example of describing some different kinds of food, along with
data on food prices.  This is all just based on a trip I took to the
grocery store, except that I've used the USDA database to look up FDC
numbers.  Note that we may need extra information to map some units
into weights.  For example, I still need to weigh a crumpet.


*** Trip to Monterey Market                                     

#+begin_src jupyter-python :tangle diet_problem.py
import pandas as pd
from eep153_tools.sheets import read_sheets

df = read_sheets('https://docs.google.com/spreadsheets/d/1ObK5N_5aVXzVHE7ZXWBg0kQvPS3k1enRwsUjhytwh5A/',sheet="Ligon's Shopping Trip")

df = df.set_index('Food')

df
#+end_src

** Another Example: Villages in South India :noexport:

  Here are some goods for which prices and quantities consumed were
  recorded in a survey conducted by the International Crops Research
  Institute of the Semi-Arid Tropics of several villages in South
  India in the 1970s & early 1980s.  Local prices for these goods were
  very low, but I've found more recent on-line prices to record here.
  #+begin_src jupyter-python :session
df = read_sheets('https://docs.google.com/spreadsheets/d/1ObK5N_5aVXzVHE7ZXWBg0kQvPS3k1enRwsUjhytwh5A/',sheet="icrisat_foods")

df = df.set_index('Food')

df
  #+end_src


** Units & Prices

 Now, the prices we observe can be for lots of different quantities and
 units.  The FDC database basically wants everything in either hundreds
 of grams (hectograms) or hundreds of milliliters (deciliters).  

 Sometimes this conversion is simple; if the price we observe is for
 something that weighs two kilograms, that's just 20 hectograms.
 Different systems of weights and volumes are also easy; a five pound
 bag of flour is approximately 22.68 hectograms.  

 Othertimes things are more complicated.  If you observe the price of a
 dozen donuts, that needs to be converted to hectograms, for example.  

 A function =units= in the [[file:fooddatacentral.py::from%20urllib.request%20import%20Request,%20urlopen][fdc]] module accomplishes this conversion
 for many different units, using the =python= [[https://pint.readthedocs.io/en/latest/][pint module]].  A file
 [[file:Data/food_units.txt][~/.units.rc]] can be edited to deal with odd cases such as
 donuts, using a format described in the =pint= [[https://pint.readthedocs.io/en/latest/advanced/defining.html][documentation]].

 Here's an example of the usage of =fooddatacentral.units=:
 #+begin_src jupyter-python :results output raw :session
# Try your own quantities and units.
# If units are missing try adding to ~/.unitsrc

print(fdc.units(5,'lbs'))
print(fdc.units(1,'gallon'))
print(fdc.units(2,'tea_bag'))
print(fdc.units(12,'donut'))
 #+end_src

 Now, use the =units= function to convert all foods to either
 deciliters or hectograms, to match FDC database:

 #+begin_src jupyter-python :results output raw :session :tangle diet_problem.py
import fooddatacentral as fdc

# Convert food quantities to FDC units
df['FDC Quantity'] = df[['Quantity','Units']].T.apply(lambda x : fdc.units(x['Quantity'],x['Units']))

# Now divide price by the FDC Quantity to get, e.g., price per hectoliter
df['FDC Price'] = df['Price']/df['FDC Quantity']

df.dropna(how='any') # Drop food with any missing data

# To use minimum price observed
Prices = df.groupby('Food')['FDC Price'].min()

Prices
 #+end_src



* Mapping to Nutrients

 Next we want to build the matrix $A$, which maps quantities of food
 into nutrients.  We have a list of foods with prices.  Do lookups on USDA database
 to get nutritional information.

 #+begin_src jupyter-python :session :tangle diet_problem.py
import warnings

D = {}
count = 0
for food in  df.index:
    try:
        FDC = df.loc[df.index==food,:].FDC.values[0]
        count+=1
        D[food] = fdc.nutrients(apikey,FDC).Quantity
        print(food)
    except AttributeError:
        warnings.warn(f"Couldn't find FDC Code {FDC} for food {food}.")

D = pd.DataFrame(D,dtype=float)

D
 #+end_src

* Dietary Requirements

We've figured out some foods we can buy, the nutritional content of
those foods, and  the price of the foods.  Now we need to say
something about nutritional requirements, and construct the vectors
$b_{min}$ and $b_{max}$.   Our data for this is based
on  US government recommendations available at
https://www.dietaryguidelines.gov/sites/default/files/2021-03/Dietary_Guidelines_for_Americans-2020-2025.pdf

I've put some of these data into a google spreadsheet at
https://docs.google.com/spreadsheets/d/1y95IsQ4HKspPW3HHDtH7QMtlDA66IUsCHJLutVL-MMc/. 
Note that we've tweaked the nutrient labels to match those in the FDC
data.

We've broken down the requirements into three different tables.  The
first is /minimum/ quantities that we need to  satisfy.  For example,
this table tells us that a 20 year-old female needs at least 46 grams
of protein per day.

#+begin_src jupyter-python
RDIs = read_sheets('https://docs.google.com/spreadsheets/d/1y95IsQ4HKspPW3HHDtH7QMtlDA66IUsCHJLutVL-MMc/')

bmin = RDIs['diet_minimums'].set_index('Nutrition')

# Drop string describing source
bmin = bmin.drop('Source',axis=1)

bmin
#+end_src

This next table specifies /maximum/ quantities.  Our 20 year-old
female shouldn't have more than 2300 milligrams of sodium per day.
#+begin_src jupyter-python
bmax = RDIs['diet_maximums'].set_index('Nutrition')

# Drop string describing source
bmax = bmax.drop('Source',axis=1)

bmax
#+end_src

* Putting it together

Here we take the different pieces of the puzzle we've developed and
put them together in the form of a linear program we can solve.
Recall that the mathematical problem we're trying to solve is
\[
    \min_x p'x
\]
such that
\[
     Ax \geq b
\]
** Objective function ($p$)
If we buy a bag of groceries with quantities given by $x$, the total
cost of the bag of groceries is the inner product of prices and
quantities.  Since we've converted our units above, this gives us a
vector of prices where quantities are all in 100 g or ml units.
#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py
p = Prices.apply(lambda x:x.magnitude).dropna()

# Compile list that we have both prices and nutritional info for; drop if either missing
use = p.index.intersection(D.columns)
p = p[use]

p
#+end_src

** Nutrient Mapping Matrix ($A$)

The matrix $A$ maps a bag of groceries $x$ into nutrients, but we
don't need to keep track of nutrients for which we don't have
contraints.

#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py

# Drop nutritional information for foods we don't know the price of,
# and replace missing nutrients with zeros.
Aall = D[p.index].fillna(0)

# Drop rows of A that we don't have constraints for.
Amin = Aall.loc[bmin.index]

Amax = Aall.loc[bmax.index]

# Maximum requirements involve multiplying constraint by -1 to make <=.
A = pd.concat([Amin,-Amax])

A
#+end_src

** Constraint vector ($b$)

Finally, the right hand side vector $b$ in the expression
\[
    Ax\geq b
\]
#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py
b = pd.concat([bmin,-bmax]) # Note sign change for max constraints

b
#+end_src

* Solving the problem

First, we find a solution to the problem
#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py
from  scipy.optimize import linprog as lp
import numpy as np

tol = 1e-6 # Numbers in solution smaller than this (in absolute value) treated as zeros

## Choose sex/age group!
group = "F 19-30"

# Now solve problem!  (Note that the linear program solver we'll use assumes
# "less-than-or-equal" constraints.  We can switch back and forth by
# multiplying $A$ and $b$ by $-1$.)

result = lp(p, -A, -b[group], method='interior-point')

result
#+end_src


Let's interpret this.  Start with the cost of the solution:
#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py

print(f"Cost of diet for {group} is ${result.fun:.2f} per day.")
#+end_src


Next, what is it we're actually eating?

#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py
# Put back into nice series
diet = pd.Series(result.x,index=p.index)

print("\nYou'll be eating (in 100s of grams or milliliters):")
print(diet[diet >= tol])  # Drop items with quantities less than precision of calculation.
#+end_src

Given this diet, what are nutritional outcomes?
#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py

tab = pd.DataFrame({"Outcome":np.abs(A).dot(diet),"Recommendation":np.abs(b[group])})
print("\nWith the following nutritional outcomes of interest:")
tab
#+end_src


Finally, what are the constraints that bind?  Finding a less expensive
diet might involve finding less expensive sources for these particular nutrients.
#+begin_src jupyter-python :results output raw :session :tangle diet_problem.py

print("\nConstraining nutrients are:")
excess = tab.diff(axis=1).iloc[:,1]
print(excess.loc[np.abs(excess) < tol].index.tolist())

#+end_src
  
